---
import { getImage } from 'astro:assets';
import { MasonryGrid, type sortedImage } from '../components/masonry';
import BaseIndex from '../layouts/BaseIndex.astro';
import fs from 'node:fs';
import ExifReader from 'exifreader';
import { parse } from 'fecha';
import images from '../assets/images/imageList';

const sortedImages: sortedImage[] = [];

function compareByDate(a: sortedImage, b: sortedImage) {
	return new Date(b.date).getTime() - new Date(a.date).getTime();
}

function insertSorted(array: any[], element: sortedImage) {
	for (
		var i = 0;
		i < array.length && compareByDate(array[i], element) < 0;
		i++
	) {}
	array.splice(i, 0, element);
}

export async function getImageDate(image: Record<string, any>): Promise<Date> {
	let { src: filepath } = image;

	// Hack to check if file exists, if not, probably running build
	if (!fs.existsSync(filepath)) {
		filepath = filepath.replace('@fs/', '');
		filepath = filepath.split('?').shift() as string;
	}

	if (!fs.existsSync(filepath)) {
		filepath = 'dist/' + filepath;
	}

	const exifTags = (await ExifReader.load(filepath)) as Record<string, any>;
	return 'DateTimeOriginal' in exifTags
		? (parse(
				exifTags.DateTimeOriginal.description,
				'YYYY:MM:DD HH:mm:ss'
		  ) as Date)
		: fs.statSync(filepath).birthtime;
}

await Promise.all(
	Object.entries(images).map(async ([key, value]) => {
		const date = await getImageDate(value);
		const dashedSlug =
			key.slice(0, 3) + '-' + key.slice(3, -3) + '-' + key.slice(-3);

		insertSorted(sortedImages, {
			original: await getImage({
				src: value,
				format: 'webp',
				alt: `Gallery Image ${dashedSlug}`,
			}),
			thumbnail: await getImage({
				src: value,
				width: 640,
				quality: 80,
				format: 'webp',
				alt: `Gallery Image ${dashedSlug}`,
			}),
			date: date,
			slug: `image/${dashedSlug}`,
		});
	})
);
---

<BaseIndex
	title="Galerie d'Ayaan"
	description="Ayaan Zaidi's personal image feed. Mild obsession with aircrafts and shiny things. Mostly shot on a mobile camera."
	permalink="https://gallery.obviy.us/">
	<MasonryGrid images={sortedImages} client:load />
</BaseIndex>
